<!DOCTYPE html>
<html>
<head>
    <title>Lecturer Homepage</title>
    <link rel="stylesheet" href="/l_style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body class="bg-gray-100">
<!------------------------------------------------>
<!--------------- BODY SECTION-------------------->
<!------------------------------------------------>
<div class="navbar">
    <h2>Welcome <span id="lecturerName"></span></h2>
</div>

<div class="sidebar" id="sidebar">
    <button class="toggle-sidebar" onclick="toggleSidebar()">
    <span>Lecturer Dashboard</span>
    <i class="fas fa-bars"></i>
</button>
    <div class="sidebar-buttons">
        <button onclick="goToHomepage()">
            <i class="fas fa-home"></i>
            <span>Homepage</span>
        </button>
        <button onclick="showAttendanceModal()">
            <i class="fas fa-clipboard-check"></i>
            <span>Mark Attendance</span>
        </button>
        <button onclick="showMarksSection()">
            <i class="fas fa-chart-bar"></i>
            <span>Upload Marks</span>
        </button>
        <button onclick="showInsightsSection()">
            <i class="fas fa-chart-line"></i>
            <span>Get Insights</span>
        </button>
    </div>
    <div class="sidebar-bottom">
        <button onclick="location.href='/l_login'" class="logout-btn">
            <i class="fas fa-sign-out-alt"></i>
            <span>Logout</span>
        </button>
    </div>
</div>

<div class="content-section" id="mainContent"></div>

    <div id="attendanceModal" class="modal">
        <div class="modal-content">
            <h3>Select Class and Date</h3>
            <div class="modal-form-row">
                <select id="classSelect">
                    <option value="">Select Class</option>
                </select>
                <input type="date" id="dateSelect">
            </div>
            <div class="modal-buttons">
                <button onclick="loadAttendanceSection()">Submit</button>
                <button onclick="document.getElementById('attendanceModal').style.display='none'">Close</button>
            </div>
        </div>
    </div>

    <div id="marksModal" class="modal">
        <div class="modal-content">
            <h3>Select Class</h3>
            <div class="modal-form-row single-input">
                <select id="marksClassSelect">
                    <option value="">Select Class</option>
                </select>
            </div>
            <div class="modal-buttons">
                <button onclick="loadMarksSection()">Submit</button>
                <button onclick="document.getElementById('marksModal').style.display='none'">Close</button>
            </div>
        </div>
    </div>
<!------------------------------------------------>
<!--------------- SCRIPT SECTION------------------>
<!------------------------------------------------>
<script>
    // ------------------------------------------------
    // ------------- HOMEPAGE SECTION -----------------
    // ------------------------------------------------

function toggleSidebar() {
    const sidebar = document.getElementById('sidebar');
    const content = document.querySelector('.content-section');
    sidebar.classList.toggle('sidebar-collapsed');
    content.classList.toggle('content-section-full');
}

    let isViewingTimetable = true;

    function goToHomepage() {
    isViewingTimetable = true;
    location.reload();
}
    async function displayTimetable() {
        if (!isViewingTimetable) return;
        const today = new Date().getDay(); // 0 is Sunday, 1 is Monday, etc.
        const days = ['MON', 'TUE', 'WED', 'THUR', 'FRI', 'SAT'];
        
        let timetableHTML = `
            <h2 class="schedule-title">Your Schedule</h2>
            <table class="timetable">
                <tr>
                    <th>Day</th>
                    <th>Hour 1</th>
                    <th>Hour 2</th>
                    <th>Hour 3</th>
                    <th>Hour 4</th>
                    <th>Lunch</th>
                    <th>Hour 5</th>
                    <th>Hour 6</th>
                </tr>
        `;

        for(let dayIndex = 0; dayIndex < days.length; dayIndex++) {
            const classSchedules = {};
            
            // Get schedules for each class taught by lecturer
            for(const classID of lecturer.classesTaught) {
                const response = await fetch(`/api/class/schedule/${classID}`);
                const schedule = await response.json();
                classSchedules[classID] = schedule;
            }

            // Check if it's current day (today)
            const isCurrentDay = dayIndex + 1  === today;
            
            timetableHTML += `
                <tr class="${isCurrentDay ? 'current-day' : ''}">
                    <td><strong>${days[dayIndex]}</strong></td>
            `;

            // Add 6 time slots
            for(let hour = 1; hour <= 7; hour++) {
                if(hour === 5) {
                    timetableHTML += `<td class="lunch-break"></td>`;
                    continue;
                }

                let hourText = '';
                // Check each class's schedule for this day and hour
                for(const classID in classSchedules) {
                    const daySchedule = classSchedules[classID].timeTable[dayIndex];
                    if(daySchedule && daySchedule.hours[hour] && await isLecturerSubject(classID, daySchedule.hours[hour])) {
                        hourText = `${classID}<br>${daySchedule.hours[hour]}`;
                        break;
                    }
                }
                timetableHTML += `<td>${hourText}</td>`;
            }
            timetableHTML += '</tr>';
        }
        timetableHTML += '</table>';

        document.getElementById('mainContent').innerHTML = timetableHTML;
    }

    async function isLecturerSubject(classID, subject) {
        const response = await fetch(`/api/subject-assignments/find?classID=${classID}&lecturer_id=${lecturer.lecturer_id}`);
        const assignment = await response.json();
        return assignment && assignment.subject === subject;
    }

    // ------------------------------------------------
    // ------------- ATTENDANCE SECTION ---------------
    // ------------------------------------------------
    let lecturer = null;
    let currentSubject = null;

    async function loadLecturerData() {
        const username = window.location.pathname.split('/')[2];
        const response = await fetch(`/api/lecturer/${username}`);
        lecturer = await response.json();

        // Update lecturer name in navbar
        document.getElementById('lecturerName').textContent = lecturer.name;
        
        const classSelect = document.getElementById('classSelect');
        classSelect.innerHTML = '<option value="">Select Class</option>';
        
        lecturer.classesTaught.forEach(className => {
            const option = document.createElement('option');
            option.value = className;
            option.textContent = className;
            classSelect.appendChild(option);
        });
    }

    function showAttendanceModal() {
        const modal = document.getElementById('attendanceModal');
        modal.style.display = 'block';
        document.getElementById('dateSelect').valueAsDate = new Date();
    }

    async function loadAttendanceSection() {
        const classID = document.getElementById('classSelect').value;
        const date = document.getElementById('dateSelect').value;
        
        if (!classID || !date) {
            alert('Please select both class and date');
            return;
        }

        try {
            const subjectResponse = await fetch(`/api/subject-assignments/find?classID=${classID}&lecturer_id=${lecturer.lecturer_id}`);
            const subjectData = await subjectResponse.json();
            if (!subjectData) {
                alert('No subject assignment found for this class');
                return;
            }
            currentSubject = subjectData.subject;

            const scheduleResponse = await fetch(`/api/class/schedule?classID=${classID}&date=${date}&subject=${currentSubject}`);
            const scheduleData = await scheduleResponse.json();
            
            if (!scheduleData.hours || scheduleData.hours.length === 0) {
                alert('No teaching hours found for this day');
                return;
            }

            const studentsResponse = await fetch(`/api/students/${classID}`);
            const students = await studentsResponse.json();

            displayAttendanceForm(classID, date, scheduleData.hours, students);
            document.getElementById('attendanceModal').style.display = 'none';
        } catch (error) {
            console.error('Error:', error);
            alert('Error loading attendance section');
        }
    }

    function displayAttendanceForm(classID, date, hours, students) {
        const content = document.getElementById('mainContent');
        students.sort((a, b) => a.rollnumber - b.rollnumber);
        let html = `
            <h2>Mark Attendance</h2>
            <p>Class: ${classID}</p>
            <p>Date: ${date}</p>
            <p>Subject: ${currentSubject}</p>
            <p>Assigned Periods: ${hours.join(', ')}</p>
            <form onsubmit="submitAttendance(event)">
                <input type="hidden" name="classID" value="${classID}">
                <input type="hidden" name="date" value="${date}">
                <select name="hour" required onchange="checkAttendanceStatus(event)">
                    <option value="">Select Hour</option>
                    ${hours.map(h => `<option value="${h}">${h}</option>`).join('')}
                </select>
                <div id="attendanceForm" style="display:none">
                    <table class="attendance-table">
                        <tr>
                            <th>Roll Number</th>
                            <th>Name</th>
                            <th>Present</th>
                        </tr>
                        ${students.map(student => `
                            <tr>
                                <td>${student.rollnumber}</td>
                                <td>${student.name}</td>
                                <td>
                                    <input type="checkbox" name="present" value="${student.rollnumber}">
                                </td>
                            </tr>
                        `).join('')}
                    </table>
                    <button type="submit">Submit Attendance</button>
                </div>
            </form>
        `;
        content.innerHTML = html;
    }

    async function checkAttendanceStatus(event) {
        const hour = event.target.value;
        const classID = document.querySelector('input[name="classID"]').value;
        const date = document.querySelector('input[name="date"]').value;

        const response = await fetch(`/api/attendance/check?classID=${classID}&date=${date}&hour=${hour}`);
        const data = await response.json();

        const attendanceForm = document.getElementById('attendanceForm');
        if (data.updated) {
            alert('Attendance already marked for this hour');
            event.target.value = '';
            attendanceForm.style.display = 'none';
        } else {
            attendanceForm.style.display = 'block';
        }
    }

    async function submitAttendance(event) {
        event.preventDefault();
        const formData = new FormData(event.target);
        const presentStudents = formData.getAll('present');
        
        const attendanceData = {
            classID: formData.get('classID'),
            date: formData.get('date'),
            hour: formData.get('hour'),
            subject: currentSubject,
            lecturer_id: lecturer.lecturer_id,
            student_data: []
        };

        const studentsResponse = await fetch(`/api/students/${attendanceData.classID}`);
        const students = await studentsResponse.json();

        students.forEach(student => {
            attendanceData.student_data.push({
                rollnumber: student.rollnumber,
                isPresent: presentStudents.includes(student.rollnumber)
            });
        });

        try {
            const response = await fetch('/api/attendance/mark', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(attendanceData)
            });

            const result = await response.json();
            if (result.success) {
                alert('Attendance marked successfully!');
                document.getElementById('mainContent').innerHTML = '';
            } else {
                alert(result.error || 'Error marking attendance');
            }
        } catch (error) {
            alert('Error submitting attendance');
        }
    }

    // ------------------------------------------------
    // ------------- MARKS SECTION --------------------
    // ------------------------------------------------
    function showMarksSection() {

        const modal = document.getElementById('marksModal');
        modal.style.display = 'block';
        
        const classSelect = document.getElementById('marksClassSelect');
        classSelect.innerHTML = '<option value="">Select Class</option>';
        
        lecturer.classesTaught.forEach(className => {
            const option = document.createElement('option');
            option.value = className;
            option.textContent = className;
            classSelect.appendChild(option);
        });
    }

    async function loadMarksSection() {
        const classID = document.getElementById('marksClassSelect').value;
        
        if (!classID) {
            alert('Please select a class');
            return;
        }

        try {
            const subjectResponse = await fetch(`/api/subject-assignments/find?classID=${classID}&lecturer_id=${lecturer.lecturer_id}`);
            const subjectData = await subjectResponse.json();
            
            if (!subjectData) {
                alert('No subject assignment found for this class');
                return;
            }

            const marksResponse = await fetch(`/api/marks/${classID}/${subjectData.subject}`);
            const marksData = await marksResponse.json();
            
            displayMarksForm(classID, subjectData.subject, marksData);
            document.getElementById('marksModal').style.display = 'none';
        } catch (error) {
            console.error('Error:', error);
            alert('Error loading marks section');
        }
    }

    function displayMarksForm(classID, subject, students) {
        const content = document.getElementById('mainContent');
        students.sort((a, b) => a.rollnumber - b.rollnumber);
        let html = `
            <h2>Class: ${classID}</h2>
            <h2>Subject: ${subject}</h2>
            <form id="marksForm" onsubmit="saveMarks(event)">
                <table class="attendance-table">
                    <tr>
                        <th>S.No</th>
                        <th>Roll Number</th>
                        <th>Name</th>
                        <th>CIE1</th>
                        <th>CIE2</th>
                        <th>Assignment</th>
                        <th>Total</th>
                    </tr>
                    ${students.map((student, index) => `
                        <tr>
                            <td>${index + 1}</td>
                            <td>${student.rollnumber}</td>
                            <td>${student.name}</td>
                            <td><input type="number" min="0" max="50" name="CIE1_${student.student_id}" value="${student.marks.CIE1}" oninput="calculateTotal(this)"></td>
                            <td><input type="number" min="0" max="50" name="CIE2_${student.student_id}" value="${student.marks.CIE2}" oninput="calculateTotal(this)"></td>
                            <td><input type="number" min="0" max="50" name="Assignment_${student.student_id}" value="${student.marks.Assignment}" oninput="calculateTotal(this)"></td>
                            <td id="total_${student.student_id}">${calculateTotalMarks(student.marks)}</td>
                            <input type="hidden" name="student_id" value="${student.student_id}">
                        </tr>
                    `).join('')}
                </table>
                <input type="hidden" name="subject" value="${subject}">
                <button type="submit">Save Marks</button>
            </form>
        `;
        content.innerHTML = html;
    }

    function calculateTotalMarks(marks) {
        return ((Number(marks.CIE1) + Number(marks.CIE2)) / 2) + Number(marks.Assignment);
    }

    function calculateTotal(input) {
        const row = input.closest('tr');
        const student_id = row.querySelector('input[name="student_id"]').value;
        const CIE1 = Number(row.querySelector(`input[name="CIE1_${student_id}"]`).value);
        const CIE2 = Number(row.querySelector(`input[name="CIE2_${student_id}"]`).value);
        const Assignment = Number(row.querySelector(`input[name="Assignment_${student_id}"]`).value);
        
        const total = ((CIE1 + CIE2) / 2) + Assignment;
        document.getElementById(`total_${student_id}`).textContent = total.toFixed(2);
    }

    async function saveMarks(event) {
        event.preventDefault();
        const form = event.target;
        const subject = form.querySelector('input[name="subject"]').value;
        const student_ids = Array.from(form.querySelectorAll('input[name="student_id"]')).map(input => input.value);
        
        try {
            const promises = student_ids.map(async (student_id) => {
                const data = {
                    student_id,
                    subject,
                    CIE1: Number(form.querySelector(`input[name="CIE1_${student_id}"]`).value),
                    CIE2: Number(form.querySelector(`input[name="CIE2_${student_id}"]`).value),
                    Assignment: Number(form.querySelector(`input[name="Assignment_${student_id}"]`).value)
                };
                
                return fetch('/api/marks/update', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
            });
            
            await Promise.all(promises);
            alert('Marks saved successfully!');
        } catch (error) {
            alert('Error saving marks');
        }
    }
    // ------------------------------------------------
    // ------------- INSIGHTS SECTION -----------------
    // ------------------------------------------------
        async function showInsightsSection() {
            const content = document.getElementById('mainContent');
            let generalInfo = await getGeneralInfo();
            
            content.innerHTML = `
                <h2>Your Teaching Profile</h2>
                <div class="info-section">
                    ${generalInfo}
                    <div class="action-buttons">
                        <button onclick="getGeneralAnalysis()" class="analysis-btn">Get General Analysis</button>
                        <select id="classInsightSelect" onchange="getClassSpecificInsights(this.value)">
                            <option value="">Select a Class</option>
                            ${lecturer.classesTaught.map(cls => 
                                `<option value="${cls}">${cls}</option>`
                            ).join('')}
                        </select>
                    </div>
                    <div id="analysisContent"></div>
                </div>
            `;
        }

        async function getGeneralInfo() {
            let html = '<div class="classes-info">';
            
            for(const classID of lecturer.classesTaught) {
                const subjectRes = await fetch(`/api/subject-assignments/find?classID=${classID}&lecturer_id=${lecturer.lecturer_id}`);
                const subjectData = await subjectRes.json();
                
                html += `
                    <div class="class-card">
                        <h3>Class: ${classID}</h3>
                        <p>Subject: ${subjectData.subject}</p>
                    </div>
                `;
            }
            
            return html + '</div>';
        }

        async function getGeneralAnalysis() {
            try {
                const response = await fetch(`/api/insights/general/${lecturer.lecturer_id}`);
                const insights = await response.json();
                
                if (!insights || insights.length === 0) {
                    document.getElementById('analysisContent').innerHTML = '<p>No data available for analysis</p>';
                    return;
                }

                const analysisContent = document.getElementById('analysisContent');
                analysisContent.innerHTML = `
                    <h3>Attendance Overview</h3>
                    <table class="attendance-table">
                        <tr>
                            <th>S.No</th>
                            <th>Class</th>
                            <th>Subject</th>
                            <th>Total Hours</th>
                            <th>Total Students</th>
                            <th>Total Presentees</th>
                            <th>Avg Presentees</th>
                            <th>Presentee %</th>
                        </tr>
                        ${insights.map((insight, index) => `
                            <tr>
                                <td>${index + 1}</td>
                                <td>${insight.classID}</td>
                                <td>${insight.subject || 'N/A'}</td>
                                <td>${insight.totalHours || 0}</td>
                                <td>${insight.totalStudents || 0}</td>
                                <td>${insight.totalPresentees || 0}</td>
                                <td>${(insight.avgPresentees || 0).toFixed(2)}</td>
                                <td>${(insight.presenteePercentage || 0).toFixed(2)}%</td>
                            </tr>
                        `).join('')}
                    </table>

                    <h3>Marks Overview</h3>
                    <table class="attendance-table">
                        <tr>
                            <th>S.No</th>
                            <th>Class</th>
                            <th>Subject</th>
                            <th>Total Students</th>
                            <th>Students < 40% (CIE1)</th>
                            <th>Students < 40% (CIE2)</th>
                            <th>Students < 40% (Overall)</th>
                            <th>% Students < 40% (Overall)</th>
                        </tr>
                        ${insights.map((insight, index) => `
                            <tr>
                                <td>${index + 1}</td>
                                <td>${insight.classID}</td>
                                <td>${insight.subject || 'N/A'}</td>
                                <td>${insight.totalStudents || 0}</td>
                                <td>${insight.belowFortyCount?.CIE1 || 0}</td>
                                <td>${insight.belowFortyCount?.CIE2 || 0}</td>
                                <td>${insight.belowFortyCount?.Overall || 0}</td>
                                <td>${(insight.belowFortyCount?.Percentage || 0).toFixed(2)}%</td>
                            </tr>
                        `).join('')}
                    </table>
                `;
            } catch (error) {
                console.error('Error fetching insights:', error);
                document.getElementById('analysisContent').innerHTML = '<p>Error loading analysis data</p>';
            }
        }

        async function getClassSpecificInsights(classID) {
            if (!classID) return;
            
            const response = await fetch(`/api/insights/class/${classID}/${lecturer.lecturer_id}`);
            const data = await response.json();
            
            const analysisContent = document.getElementById('analysisContent');
            analysisContent.innerHTML = `
                <div class="class-info">
                    <p><strong>Class:</strong> ${data.classInfo.className}</p>
                    <p><strong>Subject:</strong> ${data.classInfo.subject}</p>
                    <p><strong>Total Hours Taken:</strong> ${data.classInfo.totalHours}</p>
                    <p><strong>Hours Assigned per Week:</strong> ${data.classInfo.weeklyHours}</p>
                </div>

                <h3>Attendance Details</h3>
                <table class="attendance-table">
                    <tr>
                        <th>S.No</th>
                        <th>Roll No</th>
                        <th>Name</th>
                        <th>Classes Attended</th>
                        <th>Attendance %</th>
                    </tr>
                    ${data.studentData.map((student, index) => `
                        <tr>
                            <td>${index + 1}</td>
                            <td>${student.rollnumber}</td>
                            <td>${student.name}</td>
                            <td>${student.attendedClasses}</td>
                            <td>${student.attendancePercentage.toFixed(2)}%</td>
                        </tr>
                    `).join('')}
                </table>

                <h3>Marks Details</h3>
                <table class="attendance-table" id="marksTable">
                    <tr>
                        <th>S.No</th>
                        <th>Roll No</th>
                        <th>Name</th>
                        <th onclick="sortTable('CIE1')" style="cursor:pointer">CIE1 ↕</th>
                        <th onclick="sortTable('CIE2')" style="cursor:pointer">CIE2 ↕</th>
                        <th onclick="sortTable('Assignment')" style="cursor:pointer">Assignment ↕</th>
                        <th onclick="sortTable('Total')" style="cursor:pointer">Total ↕</th>
                    </tr>
                    ${data.studentData.map((student, index) => `
                        <tr>
                            <td>${index + 1}</td>
                            <td>${student.rollnumber}</td>
                            <td>${student.name}</td>
                            <td>${student.marks.CIE1}</td>
                            <td>${student.marks.CIE2}</td>
                            <td>${student.marks.Assignment}</td>
                            <td>${((student.marks.CIE1 + student.marks.CIE2) / 2 + student.marks.Assignment).toFixed(2)}</td>
                        </tr>
                    `).join('')}
                </table>
            `;
        }

        function sortTable(column) {
            const table = document.getElementById('marksTable');
            const rows = Array.from(table.querySelectorAll('tr:not(:first-child)'));
            const columnIndex = {
                'CIE1': 3,
                'CIE2': 4,
                'Assignment': 5,
                'Total': 6
            }[column];

            rows.sort((a, b) => {
                const aVal = Number(a.cells[columnIndex].textContent);
                const bVal = Number(b.cells[columnIndex].textContent);
                return bVal - aVal;
            });

            rows.forEach(row => table.appendChild(row));
        }

    async function initializePage() {
    await loadLecturerData();
    if (isViewingTimetable) {
        await displayTimetable();
    }
}

window.onload = initializePage;
</script>
</body>
</html>